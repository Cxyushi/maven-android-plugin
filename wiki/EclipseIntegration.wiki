#summary Have some good/bad luck using maven-android-plugin with an Eclipse project? Let us know here. Tell hugo@josefson.org that you want to edit the page, and he'll grant you permissions.
#labels Featured

= Introduction =

Android's official development effort provides solid support for Eclipse integration, and we'd like to make sure maven-android-plugin helps bridge Maven, Android, and Eclipse. This page will help us collect information on what works and doesn't work

== The solution ==

To make maven-android-plugin work well in Eclipse with ADT, this is what you need:

 # Go to the [http://code.google.com/a/eclipselabs.org/p/m2eclipse-android-integration/ M2Eclipse Android Integration project page] and install the tools listed under *Requirements*.
 # Of course, set up update-site url and install the !M2Eclipse Android Integration plugin in Eclipse.
  * Get version 0.2.2 or later. It should be under the category 'Maven Integration for Android Development Tools'.
 # In Eclipse, to bring in your Maven Android projects, choose File -> Import... -> Maven -> Existing Maven Projects.

That should work! If not, please [http://code.google.com/p/maven-android-plugin/issues/entry file an issue].


<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>

----
_The rest of this page contains the discussions and research which lead up to the solution. Everything below this line should be considered archived, but will be kept for a while. Feel free to edit it to suit a specific purpose, and then move it to a suitable location on this page or to a new page._
----

= First Glimpse =
_By Ben Dodson_
== Specs ==
  * Eclipse 3.4
  * maven-android-plugin 2.0
  * android sdk 1.5
  * m2eclipse plugin
== Experience ==
I imported my project from SVN into eclipse using m2eclipse's checkout from SCM tool. It was not recognized as an android project, so I clicked "convert to android project". My R.java file was never generated, leaving me with errors in my source code.

I then added the default.properties to SVN and tried again. This time, my R.java file was populated and I had no source code errors.

The old way of using Eclipse's Run => As Android Project pushed the .apk without the necessary dependencies, and I have not found a method that works inside Eclipse.

----

= Further investigations =
_By Piwa√Ø_
== Technical details ==

So we need to configure the Maven Eclipse Plugin to create the good eclipse project files.

We need a few things (to find out, just create a new app with Eclipse and read the .project and .classpath files).

.project file example (yasdic is an external jar dependency):
{{{
<?xml version="1.0" encoding="UTF-8"?>
<classpath>
	<classpathentry kind="src" path="src"/>
	<classpathentry kind="src" path="gen"/>
	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
	<classpathentry kind="lib" path="lib/yasdic-1.0.jar" sourcepath="lib/yasdic-1.0-sources.jar"/>
	<classpathentry kind="lib" path="lib/yasdic-1.0-sources.jar"/>
	<classpathentry kind="output" path="bin"/>
</classpath>
}}}

.classpath file example:
{{{
<?xml version="1.0" encoding="UTF-8"?>
<projectDescription>
	<name>MyProject</name>
	<comment></comment>
	<projects>
	</projects>
	<buildSpec>
		<buildCommand>
			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
			<arguments>
			</arguments>
		</buildCommand>
		<buildCommand>
			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
			<arguments>
			</arguments>
		</buildCommand>
		<buildCommand>
			<name>org.eclipse.jdt.core.javabuilder</name>
			<arguments>
			</arguments>
		</buildCommand>
		<buildCommand>
			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
			<arguments>
			</arguments>
		</buildCommand>
	</buildSpec>
	<natures>
		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
		<nature>org.eclipse.jdt.core.javanature</nature>
	</natures>
</projectDescription>
}}}

== In *.project* file ==

2 natures:
  * com.android.ide.eclipse.adt.AndroidNature
  * org.eclipse.jdt.core.javanature

4 build commands :
  * com.android.ide.eclipse.adt.ResourceManagerBuilder
  * com.android.ide.eclipse.adt.PreCompilerBuilder
  * org.eclipse.jdt.core.javabuilder
  * com.android.ide.eclipse.adt.ApkBuilder

== In *.classpath* file ==

A unique classpath container:
  * com.android.ide.eclipse.adt.ANDROID_FRAMEWORK

Two source classpath entries:
 * src
 * gen

One classpath entry for each dependency (the additionnal jars you would will use in your project)

Most of these can be achieved with the standard Maven Eclipse Plugin and a bit of configuration. The additional dependencies must be added as standard Maven dependencies. The two source folders (gen and src) needs to be defined.

Two problems remains : I could only get the Maven Eclipse Plugin to work with a "jar" packaging. And I couldn't find any way to specify a unique classpath container different from the default one.

{{{
<plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-eclipse-plugin</artifactId>
        <version>2.6</version>
        <configuration>
                <downloadSources>true</downloadSources>
                <downloadJavadocs>false</downloadJavadocs>
                <additionalProjectnatures>
                        <projectnature>com.android.ide.eclipse.adt.AndroidNature</projectnature>
                </additionalProjectnatures>
                <additionalBuildcommands>
                        <buildcommand>com.android.ide.eclipse.adt.ResourceManagerBuilder</buildcommand>
                        <buildcommand>com.android.ide.eclipse.adt.PreCompilerBuilder</buildcommand>
                        <buildcommand>com.android.ide.eclipse.adt.ApkBuilder</buildcommand>
                </additionalBuildcommands>
                <!--
                        This is a workaround : we do not want JRE_CONTAINER, however if
                        we remove it, it will be automatically added, and placed first.
                        So we add it in the second position, so that the project is
                        recognized as an Android project.
                -->
                <classpathContainers>
                        <classpathContainer>com.android.ide.eclipse.adt.ANDROID_FRAMEWORK</classpathContainer>
                        <classpathContainer>org.eclipse.jdt.launching.JRE_CONTAINER</classpathContainer>
                </classpathContainers>
        </configuration>
</plugin>
}}}

About the "jar" packaging: it seems that the Maven Eclipse Plugin only works when the language of the artifact is "java". So the solution should be to set `<language>java</language>` in the ArtifactHandler of the Maven Android Plugin.

The solution should be to simply add `<language>java</language>` to the `<configuration/>` of the org.apache.maven.artifact.handler.ArtifactHandler `<component/>` (after line 67), in the file src/main/resources/META-INF/plexus/components.xml ( See [http://github.com/jayway/maven-android-plugin/blob/f339f553e7baf8f8586c2548cbfcadf5ae3b109f/src/main/resources/META-INF/plexus/components.xml here]).

{{{
      <component>
         <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
         <role-hint>dex</role-hint>
         <implementation>org.apache.maven.artifact.handler.DefaultArtifactHandler</implementation>
         <configuration>
            <extension>dex</extension>
            <type>dex</type>
<language>java</language>
         </configuration>
      </component>
}}}

However, I am not sure of which ArtifactHandler should have this "language" element. I may be totally wrong. I guessed that solution from a bit of googling, see here: http://www.mail-archive.com/andromda-devel@lists.sourceforge.net/msg09211.html


About the classpath container: this default behavior does not seem to be configurable. The only solution might be to extends the maven-eclipse-plugin and have a subclass of org.apache.maven.plugin.eclipse.EclipsePlugin that would override fillDefaultClasspathContainers() and verifyClasspathContainerListIsComplete() methods. However, verifyClasspathContainerListIsComplete is private (but called only if the classpath containers has been added by the user). 

See [http://maven.apache.org/plugins/maven-eclipse-plugin/apidocs/org/apache/maven/plugin/eclipse/EclipsePlugin.html javadoc here] and [http://svn.apache.org/viewvc/maven/plugins/tags/maven-eclipse-plugin-2.7/src/main/java/org/apache/maven/plugin/eclipse/EclipsePlugin.java?view=co source here].

Maybe we could get some help from the maven-eclipse-plugin guys, and have a new option created to disable default jre container.

----
