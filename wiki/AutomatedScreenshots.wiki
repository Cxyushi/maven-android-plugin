#summary On-demand screenshots during Android integration tests

Visual design is (increasingly) important to Android apps, and though it's difficult to test, you _can_ make visual checks much easier by capturing screenshots from your device during your integration tests. As of v3.1.2, the android-maven-plugin includes support for taking screenshots whenever requested to do so by your instrumentation test code.

The screenshot capture speed is about 1 frame per second, so you can't get full motion video, but all screenshots captured for a particular test run are also compressed into an animated gif. This gif can be posted to your build radiator or dev chatroom on each build, to give quick visual feedback on the current state of the app.

= Usage =

Getting a screenshot is simple - you just invoke 'poseForScreenshot()'
when you want one:

{{{
    public void testAppearance() {
        startActivitySync(ConfigureMorseActivity.class);
        Instrumentation instrumentation = getInstrumentation();

        sleep(500); // robotium provides neater ways of waiting for the activity to initialise

        poseForScreenshot();
        instrumentation.sendStringSync("s");
        poseForScreenshot();
        instrumentation.sendStringSync("o");
        poseForScreenshot();
        instrumentation.sendStringSync("s");
        poseForScreenshotNamed("ConfigureMorseActivity-SOS");
    }
}}}

The rest of the test is just setting up the activity so it's ready to have it's screenshot taken - ie startActivitySync() and then waiting a short period for the activity to be ready.

The screenshots will be placed in a 'screenshots' folder under your
instrumentation test target directory, for example:

morseflash/morseflash-instrumentation/target/screenshots

They're named sequentially by default (0000.png, 0001.png, etc), but you
can set an explicit name for the shot using 'poseForScreenshotNamed()'
if you like. In addition, for each android device used in the tests, an
animated-gif will be created showing all screenshots taken.

= Examples =

The morseflash project has an [https://github.com/jayway/maven-android-plugin-samples/commit/8094291fee576fb21f202e320b56552a46a81957#L1R47 example test] that takes screenshots and there's also an [https://github.com/github/gauges-android/blob/gauges-android-1.1/integration-tests/src/main/java/com/github/mobile/gauges/test/AppearanceTest.java#L88-109 example robotium test] in the open-source _Gaug.es_ android app by !GitHub.