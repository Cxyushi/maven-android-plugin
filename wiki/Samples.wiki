#summary About the sample code.
#labels Featured

== Where can I find the samples? ==

This link will take you to the latest stable samples:

--> [http://github.com/jayway/maven-android-plugin-samples/archives/stable Download samples from the stable branch]

This link will take you to samples for testing the latest beta of maven-android-plugin:

--> [http://github.com/jayway/maven-android-plugin-samples/archives/beta Download samples from the beta branch]


=== Important notes: ===

 #. Use the above links to get a correct version of the samples! Then you will automatically use a proper released version of maven-android-plugin. If you would use the very latest "master" version of the samples, they will require that you compile the plugin by yourself first. (Full explanation about correct version is on the [http://code.google.com/p/maven-android-plugin/wiki/Source?tm=4 Source] tab.)
 #. Make sure to choose a location with a short path to unzip the package; it has deeply nested structures and you want to stay within the path length limits of your OS. Windows is known to skip some deeply located files when the complete directory path becomes too long.

== What are the samples? ==

=== !HelloFlashlight ===

The !HelloFlashlight example represent the simplest setup. It has one module that can be built and deployed with the plugin.
 
=== !MorseFlash ===

The !MorseFlash is the most comprehensive example available. It has a plain java library module, the application module and a instrumentation test module. Among other things it features 

  * different profiles for development vs release build including setup for signing, zipaligning and proguard usage
  * resource filtering setup
  * automatic emulator start
  * unit tests in library and apk module
  * instrumentation tests running emulator
  * profiles for auotmatically correct behaviour under different build operating systems

=== Scala ===

The Scala example show you how to build an Android application written with the Scala language and how to use Proguard to reduce the size of the resulting package.

=== !LibraryProjects (beta) ===

The !LibraryProjects example in the _beta_ link above, shows how to set up Android Library Projects. An app project called {{{libraryprojects-mainapp}}} has dependencies to two libraries of type {{{apklib}}}. There are also instrumentation tests to verify that all different kind of resources from the libraries are reachable from the main app.

More documentation on Android Library Projects: ApkLib.

=== !ApiDemos ===
!ApiDemos is a sample application that comes with the Android SDK converted to use a Maven Android Plugin based build. 

The samples are meant to show you how to create a {{{pom.xml}}} and structure your project to work with Maven Android Plugin.

For example, the apidemos sample has this structure:
{{{
|
\-- apidemos-15
  \
  +--- apidemos-15-app
  |
  \--- apidemos-15-instrumentationtest

}}}
 * The directory name {{{apidemos-15}}} means it contains !ApiDemos from Android SDK 1.5

 * It is split up into two Maven projects:
   * {{{apidemos-15-app}}}, which contains a {{{pom.xml}}} and source code for the application apk.
   * {{{apidemos-15-instrumentationtest}}}, which contains a {{{pom.xml}}} and source code for instrumentation tests of the app.


== How to build the samples ==

You can build all samples in one go by running 

{{{ 
mvn clean install 
}}}

in the samples root folder. As a prerequisite you have to have an emulator of API level 4 (platform 1.6) or higher running or equivalent device connected. Otherwise the build will try to start an emulator named "23" for you. An Android Virtual Device of that name has to exist for the build to succeed.

You can also run each example separately with the same command. Sample specific documentation can be found in the README.txt file in each project folder.

For example if you have set up your development environment according to GettingStarted, you can build for example the !ApiDemos sample from Android SDK 1.5 like this:

 {{{
 cd apidemos-15
 mvn install
 }}}

When you build from that directory, you will build both the application project and instrumentation test project. They both generate an apk each.

As part of the {{{apidemos-15-instrumentationtest}}} project, Maven Android Plugin will deploy both apk files to the connected device or emulator and
run the instrumentation tests inside the device.