#summary Instructions for deployment.
#labels Phase-Deploy

= Introduction =

This should be of no interest to developers of Android applications. This is for those developers of the Android Maven Plugin who perform releases of the plugin.

= Setup environment =

== Building environment ==

Set up the normal coding environment according to instructions on the [Building] page.

== GPG ==

In Ubuntu, you should use Seahorse ({{{sudo aptitude install seahorse}}}). It makes these things easier. I think
it includes the required gpg-agent too.

  * Make sure you have a gpg key. Maven Central requires it.
    * Here are some instructions: http://maven.apache.org/developers/release/pmc-gpg-keys.html
    * You should upload it to http://pgp.mit.edu/
  * Run some kind of gpg-agent. Our {{{pom.xml}}} requires it.
  * If you need to migrate keys look at http://irtfweb.ifa.hawaii.edu/~lockhart/gpg/gpg-cs.html

When using gpg2 you will need to tell the Maven GPG Plugin that the executable is gpg2. Do this by passing the -Dgpg.executable=gpg2 on the command line invocation of your Maven build command.
If you don't want to be asked the password for your GPG key during the build you can use -Dgpg.passphrase="supersecretpassword", but be careful .. this will be saved in your history file .. 

== Settings.xml ==

In order for Maven to use your credentials to access the deployment repositories (for which you have to ask Hugo for permission) you have to add them to your ~/.m2/settings.xml file. It should look like this

{{{
<!-- jayway servers for Android Maven Plugin -->
<server>
  <id>oss.sonatype.org-jayway-staging</id>
  <username>yourname</username>
  <password>yourpassword</password>
</server>
<server>
  <id>oss.sonatype.org-jayway-snapshots</id>
  <username>yourname</username>
  <password>yourpassword</password>
</server>
}}}
with the respective username and password.

In addition you need to add your github credentials into settings.xml for the site deployment to github pages as part of the release build to work:
{{{
<!-- jayway servers for Android Maven Plugin -->
<server>
  <id>githb</id>
  <username>yourname</username>
  <password>yourpassword</password>
</server>
}}}

= Are you okay to release and deploy? =

In order to be deployed the builds on the CI server for the plugin and the samples should pass! If that is not the case.. fix that first. 

Once that is ok also try building the site locally with

{{{
mvn clean install site
}}}

and if that fails, get it to work too ;-)
  
= Deploy a SNAPSHOT version =

If you want to make available a binary version of Android Maven Plugin for someone to test, before making a proper release, deploy a SNAPSHOT version.

Don't worry, it will sit in a separate directory structure from the proper releases. It won't end up on Maven Central.

== Do it! ==

To perform the SNAPSHOT release:

  {{{
  cd ~/maven-android-plugin
  mvn clean deploy -P official-release
  }}}

That should deploy the artifacts directly to our SNAPSHOT repo on [http://oss.sonatype.org]. Daring users can follow instructions in [SnapshotRepo] to access them.

= Perform a RELEASE =

This is the real deal. A release will be synced to Maven Central after a few hours, and then there is NO way to have it removed. Make sure it passes all tests!

== Do it! ==

To perform the release:

{{{
  cd ~/maven-android-plugin
  export MAVEN_OPTS='-Xmx256m' 
  mvn release:prepare release:perform
}}}

That should perform the entire release, including deploying the site to github pages and deploying the plugin to our staging repo at [http://oss.sonatype.org/].


Now you need to promote the staged release, for it to be moved to the release repo where it's synced to Central from.

Thanks to the staging plugin usage you can just do:
{{{
  cd target/checkout
  mvn nexus-staging:release
}}}

Or you can do it in the user interface manually as well as check out the components created

  #. Browse to [http://oss.sonatype.org/] and log in.
  #. Click "Staging Repositories".
  #. Select the repo and choose "Close".
  #. Then choose "Relese" for the same repo.
  #. If prompted for where to release it, choose "Jayway Releases".

== Update samples  ==

Check out the master branch and change all version strings for the android maven plugin to use the new SNAPSHOT version. Build, commit and push to origin master.

WAIT UNTIL THE RELEASE IS SYNCED TO CENTRAL

Check here http://repo1.maven.org/maven2/com/jayway/maven/plugins/android/generation2/android-maven-plugin/

Check out the stable branch, pull up from the master branch in case there are any changes and change all the version strings for the android maven plugin to use the new released version. Build, commit and push to origin stable.

== Update Changelog ==

Update [Changelog] with all interesting information about the plugin release, such as:

  * Fixed Issues - link to them.
  * New features - link to any related Issues.
  * Any changes that break backwards compatibility - tell users exactly what they must do to upgrade their projects.

== Announce ==

Announce on [http://groups.google.com/group/maven-android-developers Maven Android Developers]
and ideally also on the [http://maven.apache.org/mail-lists.html Maven developers and users mailing lists]

== Update front page ==

On the project front page, edit the link and version number for "Latest version / Stable...". Use [http://code.google.com/p/maven-android-plugin/admin the admin page] to edit it.

To obtain a correct permalink to the announcement email, go to the [http://groups.google.com/group/maven-android-developers Maven Android Developers] group, open the announcement post and click the little chain/link icon to the right.