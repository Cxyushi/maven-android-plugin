#summary Instructions for deployment.
#labels Phase-Deploy

= Introduction =

This should be of no interest to developers of Android applications. This is for those developers of the Maven Android Plugin who perform releases of the plugin.


= Setup environment =

== Building environment ==

Set up the normal coding environment according to instructions on the [Building] page.

== m2site via svn ==

Checkout the m2site as described in its checkout instructions (for project members):
  
  * http://code.google.com/p/maven-android-plugin-m2site/source/checkout
  
For simplicity, the rest of this page will assume you have checked it out to your home directory, {{{~}}}.

== More environment variables ==

Apart from the environment variable(s) you set up in [Building], you also need to set up this:

  {{{
  export MAVEN_ANDROID_PLUGIN_M2SITE_SVN_WORKINGCOPY=file://$HOME/maven-android-plugin-m2site
  }}}

== Configure subversion ==
To automatically set correct mime-types on anything you {{{svn add}}}, put this in your {{{~/.subversion/config}}}:

  {{{
  enable-auto-props = yes
  [auto-props]
  *.txt = svn:mime-type=text/plain
  *.html = svn:mime-type=text/html
  *.css = svn:mime-type=text/css
  *.png = svn:mime-type=image/png
  *.jpg = svn:mime-type=image/jpeg
  *.jpeg = svn:mime-type=image/jpeg
  *.gif = svn:mime-type=image/gif
  }}}

== GPG ==

In Ubuntu, you should use Seahorse ({{{sudo aptitude install seahorse}}}). It makes these things easier. I think
it includes the required gpg-agent too.

  * Make sure you have a gpg key. Maven Central requires it.
    * Here are some instructions: http://maven.apache.org/developers/release/pmc-gpg-keys.html
    * You should upload it to http://pgp.mit.edu/
  * Run some kind of gpg-agent. Our {{{pom.xml}}} requires it.


= Deploy a SNAPSHOT version =

If you want to make available a binary version of Maven Android Plugin for someone to test, before making a proper release, deploy a SNAPSHOT version.

Don't worry, it will sit in a separate directory structure from the proper releases. It won't end up on Maven Central.

== Do it! ==

To perform the SNAPSHOT release:

  {{{
  cd ~/maven-android-plugin
  mvn clean && mvn install && mvn deploy -P official-release
  }}}

That should deploy the artifacts directly to our SNAPSHOT repo on [http://oss.sonatype.org]. Daring users can use repo url  to access them.


= Perform a RELEASE =

This is the real deal. A release will be synced to Maven Central after a few hours, and then there is NO way to have it removed. Make sure it passes all tests!

== Check the m2site ==
Check the status of your m2site workingcopy. It should show nothing:

  {{{
  cd ~/maven-android-plugin-m2site
  svn st
  svn up
  }}}

If not, delete it and check it out according to the setup instructions above.

== Do it! ==

To perform the release:

  {{{
  cd ~/maven-android-plugin
  mvn clean && mvn install && mvn release:prepare release:perform
  }}}

That should perform the entire release, including deploying the site into {{{~/maven-android-plugin-m2site/}}} and deploying the plugin to our staging repo at [http://oss.sonatype.org/].

Now you need to promote the staged release, for it to be moved to the release repo where it's synced to Central from.

  #. Browse to [http://oss.sonatype.org/] and log in.
  #. Click "Staging".
  #. At the top, select the staging repo.
  #. In the middle frame, right click on the repo and choose "Close".
  #. Then right click again and choose "Promote".
  #. Select to promote it into "Jayway Releases".

== Upload the m2site ==
Check if there is anything you need to {{{svn add}}}:

  {{{
  cd ~/maven-android-plugin-m2site
  svn st
  }}}

...and possibly add whatever is not added yet, for example:

  {{{
  svn add *
  }}}

...or to automatically add all non-added files:

  {{{
  svn st | grep '^\?' | sed -r 's/^\? +//' | xargs svn add
  }}}

Go ahead and commit the updated site.

  {{{
  svn ci -m 'Generated maven site for maven-android-plugin 2.0.1.'
  }}}

Mime-types should hopefully be correct. Check at http://maven-android-plugin-m2site.googlecode.com/svn/index.html


== Update samples poms (to release) ==


  {{{
  cd ~/maven-android-plugin-samples
  }}}

Update the samples' {{{pom.xml}}} files to use the newly released version of the plugin, instead of the previous one. See for example [http://github.com/jayway/maven-android-plugin-samples/commit/b7bb66790495002e3456d50727987954cc84f100 this commit].

Try the updated samples with an emulator or usb device:
  {{{
  mvn clean && mvn install
  }}}

Commit the updates to git:

  {{{
  git commit -m 'Use the most recently released version of maven-android-plugin.'
  }}}

----
== WAIT UNTIL THE RELEASE IS SYNCED TO CENTRAL: ==

http://repo1.maven.org/maven2/com/jayway/maven/plugins/android/generation2/maven-android-plugin/
----

== "Half" release samples ==
Perform "half" a release. We can't sync the samples to Maven Central because they have dependencies to things not already on Central (the android jar). Therefore we don't deploy them to our m2repo at all. We do however want a release tag in git, so do it like this:

  {{{
  mvn clean && mvn release:prepare
  }}}

That should test everything and create a release tag in git.

Afterwards, you should clean up the residue release files:

  {{{
  mvn release:clean
  }}}

== Update samples poms (to snapshot) ==


  {{{
  cd ~/maven-android-plugin-samples
  }}}

Update the samples' {{{pom.xml}}} files to use the next SNAPSHOT version of the plugin, so that any rebuilds of samples on master branch will use the latest plugin code. See for example [http://github.com/jayway/maven-android-plugin-samples/commit/b56c635f0ae9179700c678244ea35be3f3e42d8b this commit].

Commit the updates to git:

  {{{
  git commit -m 'Use the next SNAPSHOT version of maven-android-plugin.'
  }}}

== Update Samples wiki page ==

Update the [Samples] wiki page. For example set the link to the release tag you just created when releasing.

== Update Changelog ==

Update [Changelog] with all interesting information about the plugin release, such as:

  * Fixed Issues - link to them.
  * New features - link to any related Issues.
  * Any changes that break backwards compatibility - tell users exactly what they must do to upgrade their projects.

== Announce ==

Announce on [http://groups.google.com/group/maven-android-developers Maven Android Developers]!