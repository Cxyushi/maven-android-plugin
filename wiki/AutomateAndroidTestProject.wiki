#summary Explains how to set up Maven to automatically build and execute an Android test project.

= Automating Android test projects with Maven =

This guide will show how an android test project created using Eclipse can be set up to build and execute using the maven android plugin. This article assumes you have already performed the steps in the QuickStartForEclipseProject article.

To enable maven builds in your test project you need to create the following pom file in the project root.
{{{
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.yourcompany</groupId>
    <artifactId>your-test-artifact-id</artifactId>
    <packaging>apk</packaging>
    <version>0.0.1-SNAPSHOT</version>
    <name>Your Test Android project Maven Enabled</name>

    <dependencies>
            <dependency>
                <groupId>com.google.android</groupId>
                <artifactId>android</artifactId>
                <version>1.6_r2</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>com.google.android</groupId>
                <artifactId>android-test</artifactId>
                <version>1.6_r2</version>
                <scope>provided</scope>
            </dependency>
         <dependency>
	    <groupId>com.yourcompany</groupId>
	    <artifactId>your-artifact-id</artifactId>
	    <type>apk</type>
	    <version>0.0.1-SNAPSHOT</version>
	 </dependency>
        <dependency>
	    <groupId>com.yourcompany</groupId>
	    <artifactId>your-artifact-id</artifactId>
	    <type>jar</type>
	    <version>0.0.1-SNAPSHOT</version>
        </dependency>
    </dependencies>
    
    <build>
        <sourceDirectory>src</sourceDirectory>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.6</source>
                    <target>1.6</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.jayway.maven.plugins.android.generation2</groupId>
                <artifactId>maven-android-plugin</artifactId>
                <configuration>
                    <sdk>
                        <path>${env.ANDROID_HOME}</path>
                        <platform>1.6</platform>
                    </sdk>
                    <deleteConflictingFiles>true</deleteConflictingFiles>
                </configuration>
                <extensions>true</extensions>
            </plugin>
        </plugins>
    </build>
    
</project>
}}}

This pom is similar to the pom in the main project but has two more dependencies. They are both pointing to the main project, one to the apk and one to the jar file. The dependency to the jar file is to enable the compiler to find your java classes from the main project. The dependency to the apk is to enable the android maven plugin to find the apk that it will run the tests against on the device or emulator when executing.

The android maven plugin can now run the tests using instrumentation, just like Eclipse does, as long as an emulator or Android device is connected. It uses the same underlying tools.

In order to execute the tests the main project needs to be built and installed into the local Maven repository. This is done with the mvn install command in the main projects root folder. When the main project have been installed the same command, mvn install, will build and execute the tests when executed from within the test projects root.